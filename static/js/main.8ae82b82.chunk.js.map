{"version":3,"sources":["assets/sounds/pick.wav","assets/sounds/hit.wav","draw/pixel.js","draw/background.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","draw/snake.js","draw/feed.js","draw/display.js","draw/draw.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread.js","utils/helper.js","update/update.js","constants/directions.js","index.js"],"names":["module","exports","__webpack_require__","p","strokePixel","ctx","viewParams","i","j","color","lineWidth","xPadding","yPadding","cellWidth","strokeStyle","strokeRect","fillPixel","fillStyle","fillRect","drawFadedPixel","fillBackground","width","height","displayHeight","columns","rows","_iterableToArray","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","_toArray","arr","isArray","_arrayWithHoles","TypeError","_nonIterableRest","drawSnake","state","_state$coords","coords","head","body","slice","SNAKE_COLOR","drawHead","forEach","_ref","drawSnakeMember","drawFeed","feed","drawFeedPixel","drawDisplay","font","textBaseline","fillText","concat","length","getScore","draw","clearRect","_toConsumableArray","arr2","_arrayWithoutHoles","_nonIterableSpread","_defineProperty","obj","key","value","defineProperty","enumerable","configurable","writable","_objectSpread","target","arguments","source","ownKeys","keys","getOwnPropertySymbols","filter","sym","getOwnPropertyDescriptor","generateFreePixel","excludedPixels","n","list","getHash","buildHashFunction","getPixel","hash","Math","floor","buildReverseHashFunction","excludedHashes","map","hashes","h","includes","random","isPixelsEqual","p1","p2","pickAudio","Audio","pickSound","hitAudio","hitSound","update","speed","snakeDirection","lastDirection","walls","lookahead","tag","some","f","play","eaten","find","canvas","document","createElement","setAttribute","getElementById","appendChild","getContext","window","onkeydown","e","code","loop","setTimeout"],"mappings":"yEAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gICA3BC,EAAc,SAACC,EAAKC,EAAYC,EAAGC,EAAGC,GAAU,IACjDC,EAA6CJ,EAA7CI,UAAWC,EAAkCL,EAAlCK,SAAUC,EAAwBN,EAAxBM,SAAUC,EAAcP,EAAdO,UACvCR,EAAIS,YAAcL,EAClBJ,EAAIK,UAAYA,EAChBL,EAAIU,WACAJ,EAAWE,EAAYN,EAAgB,IAAZG,EAC3BE,EAAWC,EAAYL,EAAgB,IAAZE,EAC3BG,EAAY,EAAIH,EAChBG,EAAY,EAAIH,IAIXM,EAAY,SAACX,EAAKC,EAAYC,EAAGC,EAAGC,GAAU,IAC/CC,EAA6CJ,EAA7CI,UAAWC,EAAkCL,EAAlCK,SAAUC,EAAwBN,EAAxBM,SAAUC,EAAcP,EAAdO,UACvCR,EAAIY,UAAYR,EAChBJ,EAAIa,SACAP,EAAWE,EAAYN,EAAI,IAAMG,EACjCE,EAAWC,EAAYL,EAAI,IAAME,EACjCG,EAAY,EAAIH,EAChBG,EAAY,EAAIH,ICjBlBS,EAAiB,SAACd,EAAKC,EAAYC,EAAGC,GACxCJ,EAAYC,EAAKC,EAAYC,EAAGC,EAAG,wBACnCQ,EAAUX,EAAKC,EAAYC,EAAGC,EAAG,wBAetBY,EAZQ,SAACf,EAAKC,GAAe,IAChCe,EAAgDf,EAAhDe,MAAOC,EAAyChB,EAAzCgB,OAAQC,EAAiCjB,EAAjCiB,cAAeC,EAAkBlB,EAAlBkB,QAASC,EAASnB,EAATmB,KAC/CpB,EAAIY,UAAY,QAChBZ,EAAIa,SAAS,EAAG,EAAGG,EAAOC,EAASC,GAEnC,IAAK,IAAIhB,EAAI,EAAGA,EAAIiB,EAASjB,IACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIiB,EAAMjB,IACtBW,EAAed,EAAKC,EAAYC,EAAGC,ICdhC,SAAAkB,EAAAC,GACf,GAAAC,OAAAC,YAAAC,OAAAH,IAAA,uBAAAG,OAAAC,UAAAC,SAAAC,KAAAN,GAAA,OAAAO,MAAAC,KAAAR,GCEe,SAAAS,EAAAC,GACf,OCJe,SAAAA,GACf,GAAAH,MAAAI,QAAAD,GAAA,OAAAA,EDGSE,CAAcF,IAASX,EAAeW,IEJhC,WACf,UAAAG,UAAA,wDFGwDC,GGFxD,IAiBeC,EARG,SAACrC,EAAKC,EAAYqC,GAAU,IAAAC,EAAAR,EAClBO,EAAME,QAAvBC,EADmCF,EAAA,GAC1BG,EAD0BH,EAAAI,MAAA,IAJ7B,SAAC3C,EAAKC,EAAYC,EAAGC,GAClCJ,EAAYC,EAAKC,EAAYC,EAAGC,EAAGF,EAAW2C,aAK9CC,CAAS7C,EAAKC,EAAYwC,EAAKvC,EAAGuC,EAAKtC,GACvCuC,EAAKI,QAAQ,SAAAC,GAAc,IAAX7C,EAAW6C,EAAX7C,EAAGC,EAAQ4C,EAAR5C,GAZC,SAACH,EAAKC,EAAYC,EAAGC,GACzCJ,EAAYC,EAAKC,EAAYC,EAAGC,EAAGF,EAAW2C,aAC9CjC,EAAUX,EAAKC,EAAYC,EAAGC,EAAGF,EAAW2C,aAWxCI,CAAgBhD,EAAKC,EAAYC,EAAGC,MCD7B8C,EAPE,SAACjD,EAAKC,EAAYqC,GACdA,EAATY,KACHJ,QAAQ,SAAAC,GAAc,IAAX7C,EAAW6C,EAAX7C,EAAGC,EAAQ4C,EAAR5C,GAPD,SAACH,EAAKC,EAAYC,EAAGC,GACvCJ,EAAYC,EAAKC,EAAYC,EAAGC,EAAG,UACnCQ,EAAUX,EAAKC,EAAYC,EAAGC,EAAG,UAM7BgD,CAAcnD,EAAKC,EAAYC,EAAGC,MCA3BiD,EARK,SAACpD,EAAKC,EAAYqC,GAAU,IACpCrB,EAA0BhB,EAA1BgB,OAAQC,EAAkBjB,EAAlBiB,cAChBlB,EAAIY,UAAY,QAChBZ,EAAIqD,KAAO,eACXrD,EAAIsD,aAAe,SACnBtD,EAAIuD,SAAJ,UAAAC,OAPa,SAAAlB,GAAK,OAAIA,EAAME,OAAOiB,OAAS,EAOrBC,CAASpB,IAAU,GAAIrB,EAASC,EAAgB,ICM5DyC,EARF,SAAC3D,EAAKC,EAAYqC,GAC3BtC,EAAI4D,UAAU,EAAG,EAAG3D,EAAWe,MAAOf,EAAWgB,QACjDF,EAAef,EAAKC,GACpBoC,EAAUrC,EAAKC,EAAYqC,GAC3BW,EAASjD,EAAKC,EAAYqC,GAC1Bc,EAAYpD,EAAKC,EAAYqC,ICPlB,SAAAuB,EAAA7B,GACf,OCJe,SAAAA,GACf,GAAAH,MAAAI,QAAAD,GAAA,CACA,QAAA9B,EAAA,EAAA4D,EAAA,IAAAjC,MAAAG,EAAAyB,QAAiDvD,EAAA8B,EAAAyB,OAAgBvD,IACjE4D,EAAA5D,GAAA8B,EAAA9B,GAGA,OAAA4D,GDFSC,CAAiB/B,IAASX,EAAeW,IEJnC,WACf,UAAAG,UAAA,mDFG2D6B,GGJ5C,SAAAC,EAAAC,EAAAC,EAAAC,GAYf,OAXAD,KAAAD,EACAzC,OAAA4C,eAAAH,EAAAC,EAAA,CACAC,QACAE,YAAA,EACAC,cAAA,EACAC,UAAA,IAGAN,EAAAC,GAAAC,EAGAF,ECXe,SAAAO,EAAAC,GACf,QAAAxE,EAAA,EAAiBA,EAAAyE,UAAAlB,OAAsBvD,IAAA,CACvC,IAAA0E,EAAA,MAAAD,UAAAzE,GAAAyE,UAAAzE,GAAA,GACA2E,EAAApD,OAAAqD,KAAAF,GAEA,oBAAAnD,OAAAsD,wBACAF,IAAArB,OAAA/B,OAAAsD,sBAAAH,GAAAI,OAAA,SAAAC,GACA,OAAAxD,OAAAyD,yBAAAN,EAAAK,GAAAX,eAIAO,EAAA/B,QAAA,SAAAqB,GACMF,EAAcS,EAAAP,EAAAS,EAAAT,MAIpB,OAAAO,ECjBA,IAcaS,EAAoB,SAACC,EAAgBhE,EAAMD,GACpD,IAfUkE,EASWC,EAMfC,EAbgB,SAAApE,GAAO,OAAI,SAAA4B,GAAA,IAAG7C,EAAH6C,EAAG7C,EAAH,OAAA6C,EAAM5C,EAAYgB,EAAUjB,GAa7CsF,CAAkBrE,GAC5BsE,EAZuB,SAAAtE,GAAO,OAAI,SAAAuE,GAAI,MAAK,CACjDxF,EAAGwF,EAAOvE,EACVhB,EAAGwF,KAAKC,MAAMF,EAAOvE,KAUJ0E,CAAyB1E,GACpC2E,EAAiBV,EAAeW,IAAIR,GACpCS,GAlBIX,EAkBWlE,EAAUC,EAlBhByC,EAAIhC,MAAMwD,IAAIU,IAAI,SAAC7F,EAAGC,GAAJ,OAAUA,KAkBN6E,OAAO,SAAAiB,GAAC,OAAKH,EAAeI,SAASD,KAG1E,OAAOR,GAZcH,EAUSU,GAThBL,KAAKC,MAAMD,KAAKQ,SAAWb,EAAK7B,WAcrC2C,EAAgB,SAACC,EAAIC,GAAL,OAAYD,EAAGnG,IAAMoG,EAAGpG,GAAKmG,EAAGlG,IAAMmG,EAAGnG,mCCnBhEoG,EAAY,IAAIC,MAAMC,KACtBC,EAAW,IAAIF,MAAMG,KAmEZC,EAxDA,SAAC3G,EAAYqC,GACxB,IAAKA,EAAO,MAVe,CAC3BuE,MAAO,EACPrE,OAAQ,CAAC,CAAEtC,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,IACpD+C,KAAM,CAAC,CAAEhD,EAAG,EAAGC,EAAG,IAClB2G,eCXgB,ODYhBC,cCViB,QDWjBC,OAAO,GAG2B,IAS9BC,EANIzE,EAAgCF,EAAhCE,OAAQuE,EAAwBzE,EAAxByE,cAAe7D,EAASZ,EAATY,KACvB/B,EAAkBlB,EAAlBkB,QAASC,EAASnB,EAATmB,KACXqB,EAAOD,EAAO,GACd0E,EAAM1E,EAAOA,EAAOiB,OAAS,GAC7Bf,EAAOF,EAAOG,MAAM,GAAI,GAG9B,OAAQoE,GACJ,IC5BU,KD6BNE,EAAY,CAAE/G,EAAGuC,EAAKvC,EAAGC,EAAGsC,EAAKtC,EAAI,GACrC,MACJ,IC9BY,OD+BR8G,EAAY,CAAE/G,EAAGuC,EAAKvC,EAAGC,EAAGsC,EAAKtC,EAAI,GACrC,MACJ,IChCY,ODiCR8G,EAAY,CAAE/G,EAAGuC,EAAKvC,EAAI,EAAGC,EAAGsC,EAAKtC,GACrC,MACJ,IClCa,QDmCT8G,EAAY,CAAE/G,EAAGuC,EAAKvC,EAAI,EAAGC,EAAGsC,EAAKtC,GAO7C,GAFAmC,EAAMwE,eAAiBC,EAEnBrE,EAAKyE,KAAK,SAAAC,GAAC,OAAIhB,EAAcgB,EAAGH,KAEhC,OADAP,EAASW,OAtCc,CAC3BR,MAAO,EACPrE,OAAQ,CAAC,CAAEtC,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,IACpD+C,KAAM,CAAC,CAAEhD,EAAG,EAAGC,EAAG,IAClB2G,eCXgB,ODYhBC,cCViB,QDWjBC,OAAO,GAoCP,GAAIC,EAAU/G,EAAI,GAAK+G,EAAU/G,GAAKiB,GAAW8F,EAAU9G,EAAI,GAAK8G,EAAU9G,GAAKiB,EAAM,CACrF,GAAIkB,EAAM0E,MAEN,OADAN,EAASW,OA5CU,CAC3BR,MAAO,EACPrE,OAAQ,CAAC,CAAEtC,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,IACpD+C,KAAM,CAAC,CAAEhD,EAAG,EAAGC,EAAG,IAClB2G,eCXgB,ODYhBC,cCViB,QDWjBC,OAAO,GAyCCC,EAAU/G,GAAK+G,EAAU/G,EAAIiB,GAAWA,EACxC8F,EAAU9G,GAAK8G,EAAU9G,EAAIiB,GAAQA,EAI7C,IAAMkG,EAAQpE,EAAKqE,KAAK,SAAAH,GAAC,OAAIhB,EAAcgB,EAAGH,KAC9C,OAAIK,GACAf,EAAUc,OACH5C,EAAA,GACAnC,EADP,CAEIY,KAAI,GAAAM,OAAAK,EAAMX,EAAK8B,OAAO,SAAAoC,GAAC,OAAIA,IAAME,KAA7B,CAAqCnC,EAAiB,GAAA3B,OAAAK,EAAKrB,GAALqB,EAAgBX,IAAO9B,EAAMD,KACvFqB,OAAM,CAAGyE,EAAWxE,GAAde,OAAAK,EAAuBnB,GAAvB,CAA6BwE,OAGhCzC,EAAA,GAAKnC,EAAZ,CAAmBE,OAAM,CAAGyE,EAAWxE,GAAde,OAAAK,EAAuBnB,OE1DlD8E,EAASC,SAASC,cAAc,UACtCF,EAAOG,aAAa,QALN,KAMdH,EAAOG,aAAa,SAAU1G,KACjBwG,SAASG,eAAe,QAChCC,YAAYL,GAEjB,IAAMxH,EAAMwH,EAAOM,WAAW,MAWxB7H,EAAa,CACfiB,cApBkB,IAqBlBF,MAvBU,IAwBVC,OAvBW,IAwBXT,UAbc,GAcdH,UAbcG,EAcdY,KAZSuE,KAAKC,MAdH,IAWG,IAgBdzE,QAZYwE,KAAKC,MAhBP,IAYI,IAiBdrF,SAXcU,GAYdX,SAXcU,GAYd4B,YAjCgB,SAoChBN,EAAQ,KA8BZyF,OAAOC,UAvBiB,SAAAC,GAAK,IACjBnB,EAAmBxE,EAAnBwE,eACR,OAAQmB,EAAEC,MACN,IAAK,YACL,IAAK,OAED,YDtDM,OCqDFpB,IAAuBxE,EAAMyE,cDpDzB,SCsDZ,IAAK,UACL,IAAK,OAED,YDzDQ,SCwDJD,IAAyBxE,EAAMyE,cDzD7B,OC2DV,IAAK,YACL,IAAK,OAED,YD3DS,UC0DLD,IAA0BxE,EAAMyE,cD3D5B,SC6DZ,IAAK,aACL,IAAK,OAED,YDhEQ,SC+DJD,IAAyBxE,EAAMyE,cD9D1B,YCuCR,SAAPoB,IACF7F,EAAQsE,EAAO3G,EAAYqC,GAC3BqB,EAAK3D,EAAKC,EAAYqC,GACtB8F,WAAWD,EAAM,IAAO7F,EAAMuE,OA2BlCsB","file":"static/js/main.8ae82b82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pick.0e7d342a.wav\";","module.exports = __webpack_public_path__ + \"static/media/hit.fe22c65d.wav\";","export const strokePixel = (ctx, viewParams, i, j, color) => {\r\n    const { lineWidth, xPadding, yPadding, cellWidth } = viewParams;\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.strokeRect(\r\n        xPadding + cellWidth * i + lineWidth * 1.5,\r\n        yPadding + cellWidth * j + lineWidth * 1.5,\r\n        cellWidth - 3 * lineWidth,\r\n        cellWidth - 3 * lineWidth\r\n    );\r\n};\r\n\r\nexport const fillPixel = (ctx, viewParams, i, j, color) => {\r\n    const { lineWidth, xPadding, yPadding, cellWidth } = viewParams;\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(\r\n        xPadding + cellWidth * i + 3.5 * lineWidth,\r\n        yPadding + cellWidth * j + 3.5 * lineWidth,\r\n        cellWidth - 7 * lineWidth,\r\n        cellWidth - 7 * lineWidth\r\n    );\r\n};\r\n","import { fillPixel, strokePixel } from './pixel';\r\n\r\nconst drawFadedPixel = (ctx, viewParams, i, j) => {\r\n    strokePixel(ctx, viewParams, i, j, 'rgba(0, 128, 0, 0.2)');\r\n    fillPixel(ctx, viewParams, i, j, 'rgba(0, 128, 0, 0.2');\r\n};\r\n\r\nconst fillBackground = (ctx, viewParams) => {\r\n    const { width, height, displayHeight, columns, rows } = viewParams;\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, width, height + displayHeight);\r\n\r\n    for (let i = 0; i < columns; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n            drawFadedPixel(ctx, viewParams, i, j);\r\n        }\r\n    }\r\n};\r\n\r\nexport default fillBackground;\r\n","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import { fillPixel, strokePixel } from './pixel';\r\n\r\nconst drawSnakeMember = (ctx, viewParams, i, j) => {\r\n    strokePixel(ctx, viewParams, i, j, viewParams.SNAKE_COLOR);\r\n    fillPixel(ctx, viewParams, i, j, viewParams.SNAKE_COLOR);\r\n};\r\n\r\nconst drawHead = (ctx, viewParams, i, j) => {\r\n    strokePixel(ctx, viewParams, i, j, viewParams.SNAKE_COLOR);\r\n};\r\n\r\nconst drawSnake = (ctx, viewParams, state) => {\r\n    const [head, ...body] = state.coords;\r\n    drawHead(ctx, viewParams, head.i, head.j);\r\n    body.forEach(({ i, j }) => {\r\n        drawSnakeMember(ctx, viewParams, i, j);\r\n    });\r\n};\r\n\r\nexport default drawSnake;\r\n","import { fillPixel, strokePixel } from './pixel';\r\n\r\nconst drawFeedPixel = (ctx, viewParams, i, j) => {\r\n    strokePixel(ctx, viewParams, i, j, 'orange');\r\n    fillPixel(ctx, viewParams, i, j, 'orange');\r\n};\r\n\r\nconst drawFeed = (ctx, viewParams, state) => {\r\n    const { feed } = state;\r\n    feed.forEach(({ i, j }) => {\r\n        drawFeedPixel(ctx, viewParams, i, j);\r\n    });\r\n};\r\n\r\nexport default drawFeed;\r\n","const getScore = state => state.coords.length - 3;\r\n\r\nconst drawDisplay = (ctx, viewParams, state) => {\r\n    const { height, displayHeight } = viewParams;\r\n    ctx.fillStyle = 'green';\r\n    ctx.font = '80px Digital';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText(`Score: ${getScore(state)}`, 20, height + displayHeight / 2);\r\n};\r\n\r\nexport default drawDisplay;\r\n","import fillBackground from './background';\r\nimport drawSnake from './snake';\r\nimport drawFeed from './feed';\r\nimport drawDisplay from './display';\r\n\r\nconst draw = (ctx, viewParams, state) => {\r\n    ctx.clearRect(0, 0, viewParams.width, viewParams.height);\r\n    fillBackground(ctx, viewParams);\r\n    drawSnake(ctx, viewParams, state);\r\n    drawFeed(ctx, viewParams, state);\r\n    drawDisplay(ctx, viewParams, state);\r\n};\r\n\r\nexport default draw;\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","const range = n => [...Array(n)].map((i, j) => j);\r\n\r\nconst buildHashFunction = columns => ({ i, j }) => j * columns + i;\r\n\r\nconst buildReverseHashFunction = columns => hash => ({\r\n    i: hash % columns,\r\n    j: Math.floor(hash / columns)\r\n});\r\n\r\nconst getRandomElement = list => {\r\n    const index = Math.floor(Math.random() * list.length);\r\n    return list[index];\r\n};\r\n\r\nexport const generateFreePixel = (excludedPixels, rows, columns) => {\r\n    const getHash = buildHashFunction(columns);\r\n    const getPixel = buildReverseHashFunction(columns);\r\n    const excludedHashes = excludedPixels.map(getHash);\r\n    const hashes = range(columns * rows).filter(h => !excludedHashes.includes(h));\r\n    const hash = getRandomElement(hashes);\r\n\r\n    return getPixel(hash);\r\n};\r\n\r\nexport const isPixelsEqual = (p1, p2) => p1.i === p2.i && p1.j === p2.j;\r\n","import { generateFreePixel, isPixelsEqual } from '../utils/helper';\r\nimport { DOWN, LEFT, RIGHT, UP } from '../constants/directions';\r\nimport pickSound from '../assets/sounds/pick.wav';\r\nimport hitSound from '../assets/sounds/hit.wav';\r\n\r\nconst pickAudio = new Audio(pickSound);\r\nconst hitAudio = new Audio(hitSound);\r\n\r\nconst getDefaultState = () => ({\r\n    speed: 5,\r\n    coords: [{ i: 2, j: 2 }, { i: 2, j: 1 }, { i: 2, j: 0 }],\r\n    feed: [{ i: 0, j: 0 }],\r\n    snakeDirection: DOWN,\r\n    lastDirection: RIGHT,\r\n    walls: false\r\n});\r\n\r\nconst update = (viewParams, state) => {\r\n    if (!state) return getDefaultState();\r\n\r\n    const { coords, lastDirection, feed } = state;\r\n    const { columns, rows } = viewParams;\r\n    const head = coords[0];\r\n    const tag = coords[coords.length - 1];\r\n    const body = coords.slice(1, -1);\r\n\r\n    let lookahead;\r\n    switch (lastDirection) {\r\n        case UP:\r\n            lookahead = { i: head.i, j: head.j - 1 };\r\n            break;\r\n        case DOWN:\r\n            lookahead = { i: head.i, j: head.j + 1 };\r\n            break;\r\n        case LEFT:\r\n            lookahead = { i: head.i - 1, j: head.j };\r\n            break;\r\n        case RIGHT:\r\n            lookahead = { i: head.i + 1, j: head.j };\r\n            break;\r\n        default:\r\n    }\r\n\r\n    state.snakeDirection = lastDirection;\r\n\r\n    if (body.some(f => isPixelsEqual(f, lookahead))) {\r\n        hitAudio.play();\r\n        return getDefaultState();\r\n    }\r\n\r\n    if (lookahead.i < 0 || lookahead.i >= columns || lookahead.j < 0 || lookahead.j >= rows) {\r\n        if (state.walls) {\r\n            hitAudio.play();\r\n            return getDefaultState();\r\n        } else {\r\n            lookahead.i = (lookahead.i + columns) % columns;\r\n            lookahead.j = (lookahead.j + rows) % rows;\r\n        }\r\n    }\r\n\r\n    const eaten = feed.find(f => isPixelsEqual(f, lookahead));\r\n    if (eaten) {\r\n        pickAudio.play();\r\n        return {\r\n            ...state,\r\n            feed: [...feed.filter(f => f !== eaten), generateFreePixel([...coords, ...feed], rows, columns)],\r\n            coords: [lookahead, head, ...body, tag]\r\n        };\r\n    } else {\r\n        return { ...state, coords: [lookahead, head, ...body] };\r\n    }\r\n};\r\n\r\nexport default update;\r\n","export const UP = 'up';\r\nexport const DOWN = 'down';\r\nexport const LEFT = 'left';\r\nexport const RIGHT = 'right';\r\n","import './index.css';\r\nimport draw from './draw/draw';\r\nimport update from './update/update';\r\nimport { DOWN, LEFT, RIGHT, UP } from './constants/directions';\r\n\r\nconst SNAKE_COLOR = 'green';\r\n\r\nconst width = 800;\r\nconst height = 400;\r\nconst displayHeight = 100;\r\n\r\nconst canvas = document.createElement('canvas');\r\ncanvas.setAttribute('width', width);\r\ncanvas.setAttribute('height', height + displayHeight);\r\nconst root = document.getElementById('root');\r\nroot.appendChild(canvas);\r\n\r\nconst ctx = canvas.getContext('2d');\r\n\r\nconst cellWidth = 70;\r\nconst lineWidth = cellWidth / 10;\r\n\r\nconst rows = Math.floor(height / cellWidth);\r\nconst columns = Math.floor(width / cellWidth);\r\n\r\nconst yPadding = (height % cellWidth) / 2;\r\nconst xPadding = (width % cellWidth) / 2;\r\n\r\nconst viewParams = {\r\n    displayHeight,\r\n    width,\r\n    height,\r\n    cellWidth,\r\n    lineWidth,\r\n    rows,\r\n    columns,\r\n    yPadding,\r\n    xPadding,\r\n    SNAKE_COLOR\r\n};\r\n\r\nlet state = null;\r\nconst loop = () => {\r\n    state = update(viewParams, state);\r\n    draw(ctx, viewParams, state);\r\n    setTimeout(loop, 1000 / state.speed);\r\n};\r\n\r\nconst keyPressHandler = e => {\r\n    const { snakeDirection } = state;\r\n    switch (e.code) {\r\n        case 'ArrowDown':\r\n        case 'KeyS':\r\n            if (snakeDirection !== UP) state.lastDirection = DOWN;\r\n            return;\r\n        case 'ArrowUp':\r\n        case 'KeyW':\r\n            if (snakeDirection !== DOWN) state.lastDirection = UP;\r\n            return;\r\n        case 'ArrowLeft':\r\n        case 'KeyA':\r\n            if (snakeDirection !== RIGHT) state.lastDirection = LEFT;\r\n            return;\r\n        case 'ArrowRight':\r\n        case 'KeyD':\r\n            if (snakeDirection !== LEFT) state.lastDirection = RIGHT;\r\n            return;\r\n        default:\r\n    }\r\n};\r\n\r\nwindow.onkeydown = keyPressHandler;\r\nloop();\r\n"],"sourceRoot":""}