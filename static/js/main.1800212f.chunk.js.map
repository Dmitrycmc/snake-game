{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","index.js"],"names":["_iterableToArray","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","_toArray","arr","isArray","_arrayWithHoles","TypeError","_nonIterableRest","_toConsumableArray","i","arr2","length","_arrayWithoutHoles","_nonIterableSpread","canvas","document","getElementById","ctx","getContext","lastRender","width","height","rows","Math","floor","columns","yPadding","xPadding","state","speed","coords","j","feed","direction","isEqualPixels","p1","p2","generateFeed","pixel","_state","random","concat","some","p","strokePixel","color","strokeStyle","lineWidth","cellWidth","strokeRect","fillPixel","fillStyle","fillRect","drawFadedPixel","drawSnake","_state$coords","head","body","slice","forEach","_ref","drawMember","drawFeed","_ref2","drawFeedPixel","drawScore","font","textBaseline","fillText","displayHeight","draw","clearRect","fillBackground","loop","timestamp","progress","arguments","undefined","lookahead","_state2","tag","f","eaten","find","filter","update","window","requestAnimationFrame","onkeydown","e","code"],"mappings":"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","file":"static/js/main.1800212f.chunk.js","sourcesContent":["export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","const UP = 'up';\r\nconst DOWN = 'down';\r\nconst LEFT = 'left';\r\nconst RIGHT = 'right';\r\n\r\nconst getDefaultState = () => ({\r\n    speed: 2,\r\n    coords: [\r\n        {i: 2, j: 2},\r\n        {i: 2, j: 1},\r\n        {i: 2, j: 0}\r\n    ],\r\n    feed: [\r\n        {i: 0, j: 0},\r\n    ],\r\n    direction: DOWN\r\n});\r\n\r\nconst SNAKE_COLOR = 'green';\r\n\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst ctx = canvas.getContext(\"2d\");\r\nlet lastRender = 0;\r\n\r\nconst displayHeight = 100;\r\nconst width = canvas.width;\r\nconst height = canvas.height - displayHeight;\r\nconst cellWidth = 50;\r\nconst lineWidth = cellWidth / 10;\r\n\r\nconst rows = Math.floor(height / cellWidth);\r\nconst columns = Math.floor(width / cellWidth);\r\n\r\nconst yPadding = (height % cellWidth) / 2;\r\nconst xPadding = (width % cellWidth) / 2;\r\n\r\nlet state = getDefaultState();\r\n\r\nconst getScore = () => state.coords.length - 3;\r\n\r\nconst isEqualPixels = (p1, p2) => p1.i === p2.i && p1.j === p2.j;\r\n\r\nconst generateFeed = () => {\r\n\tconst {coords, feed} = state;\r\n\tlet pixel;\r\n    do {\r\n    \tpixel = {   \r\n            i: Math.floor(Math.random() * columns),\r\n            j: Math.floor(Math.random() * rows)\r\n        };\r\n    } while ([...coords, ...feed].some(p => isEqualPixels(p, pixel)));\r\n    return pixel;\r\n};\r\n\r\nconst update = (progress = 0) => {\r\n    const { coords, direction, feed } = state;\r\n    const head = coords[0];\r\n    const tag = coords[coords.length - 1];\r\n    const body = coords.slice(1, -1);\r\n    \r\n    let lookahead;\r\n    switch (direction) {\r\n        case UP:\r\n            lookahead = {i: head.i ,j: head.j - 1};\r\n            break;\r\n        case DOWN:\r\n            lookahead = {i: head.i ,j: head.j + 1};\r\n            break;\r\n        case LEFT:\r\n            lookahead = {i: head.i - 1,j: head.j};\r\n            break;\r\n        case RIGHT:\r\n            lookahead = {i: head.i + 1,j: head.j};\r\n    }\r\n    \r\n    const crash = body.some(f => isEqualPixels(f, lookahead)) || lookahead.i < 0 || lookahead.i >= columns || lookahead.j < 0 || lookahead.j >= rows;\r\n    if (crash) {\r\n    \tstate = getDefaultState();\r\n        return;\r\n    }\r\n    const eaten = feed.find(f => isEqualPixels(f, lookahead));\r\n    if (eaten) {\r\n        state.feed = [...feed.filter(f => f !== eaten), generateFeed()];\r\n        state.coords = [lookahead, head, ...body, tag];\r\n    } else {\r\n        state.coords = [lookahead, head, ...body];\r\n    }\r\n}\r\n\r\nconst fillBackground = () => {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(0, 0, width, height + displayHeight);\r\n\r\n    for (let i = 0; i < columns; i++)\r\n        for (let j = 0; j < rows; j++)\r\n            drawFadedPixel(i, j);\r\n};\r\n\r\nconst strokePixel = (i, j, color) => {\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.strokeRect(xPadding + cellWidth * i + lineWidth * 1.5, yPadding + cellWidth * j + lineWidth * 1.5, cellWidth - 3 * lineWidth, cellWidth - 3 * lineWidth);\r\n};\r\n\r\nconst fillPixel = (i, j, color) => {\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(xPadding + cellWidth * i + 3.5 * lineWidth, yPadding + cellWidth * j + 3.5 * lineWidth, cellWidth - 7 * lineWidth, cellWidth - 7 * lineWidth);\r\n};\r\n\r\nconst drawFadedPixel = (i, j) => {\r\n    strokePixel(i, j, \"rgba(0, 128, 0, 0.2)\");\r\n    fillPixel(i, j, \"rgba(0, 128, 0, 0.2\");\r\n};\r\n\r\nconst drawFeedPixel = (i, j) => {\r\n    strokePixel(i, j, \"orange\");\r\n    fillPixel(i, j, \"orange\");\r\n};\r\n\r\nconst drawMember = (i, j) => {\r\n    strokePixel(i, j, SNAKE_COLOR);\r\n    fillPixel(i, j, SNAKE_COLOR);\r\n};\r\n\r\nconst drawHead = (i, j) => {\r\n    strokePixel(i, j, SNAKE_COLOR);\r\n};\r\n\r\nconst drawSnake = () => {\r\n    const [head, ...body] = state.coords;\r\n    drawHead(head.i, head.j);\r\n    body.forEach(({i, j}) => {drawMember(i, j)});\r\n};\r\n\r\nconst drawFeed = () => {\r\n    const { feed } = state;\r\n    feed.forEach(({i, j}) => {drawFeedPixel(i, j)});\r\n};\r\n\r\nconst drawScore = () => {\r\n\tctx.fillStyle = 'green';\r\n    ctx.font = \"30px Arial\";\r\n\tctx.textBaseline = \"middle\";\r\n    ctx.fillText(`Score: ${getScore()}`, 20, height + displayHeight / 2);\r\n};\r\n\r\nconst draw = () => {\r\n    ctx.clearRect(0, 0, width, height);\r\n    fillBackground();\r\n    drawSnake();\r\n    drawFeed();\r\n    drawScore();\r\n}\r\n\r\nconst loop = timestamp => {\r\n    var progress = timestamp - lastRender;\r\n\r\n    if (Math.floor(lastRender / 1000 * state.speed) !== Math.floor(timestamp / 1000 * state.speed)) {\r\n        update(progress);\r\n        draw();\r\n    }\r\n\r\n    lastRender = timestamp;\r\n    window.requestAnimationFrame(loop);\r\n};\r\n\r\nconst init = () => {\r\n    draw();\r\n    window.requestAnimationFrame(loop);\r\n};\r\n\r\nwindow.onkeydown = e => {\r\n\tconst { direction } = state;\r\n    switch (e.code) {\r\n        case 'ArrowDown':\r\n        case 'KeyS':\r\n            if (direction !== UP ) state.direction = DOWN;\r\n            return;\r\n        case 'ArrowUp':\r\n        case 'KeyW':\r\n            if (direction !== DOWN ) state.direction = UP;\r\n            return;\r\n        case 'ArrowLeft':\r\n        case 'KeyA':\r\n            if (direction !== RIGHT ) state.direction = LEFT;\r\n            return;\r\n        case 'ArrowRight':\r\n        case 'KeyD':\r\n            if (direction !== LEFT ) state.direction = RIGHT;\r\n            return;\r\n    }\r\n};\r\n\r\ninit();"],"sourceRoot":""}