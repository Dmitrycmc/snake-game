{"version":3,"sources":["assets/sounds/pick.wav","assets/sounds/hit.wav","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread.js","draw/pixel.js","draw/background.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","draw/snake.js","../node_modules/@babel/runtime/helpers/esm/toArray.js","draw/feed.js","draw/display.js","draw/menu.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","draw/scores.js","draw/draw.js","utils/helper.js","utils/api-utils.js","update/update.js","update/helpers.js","constants/directions.js","index.js"],"names":["module","exports","__webpack_require__","p","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","strokePixel","ctx","viewParams","j","color","lineWidth","xPadding","yPadding","cellWidth","strokeStyle","strokeRect","fillPixel","fillStyle","fillRect","drawFadedPixel","fillBackground","width","height","displayHeight","columns","rows","_arrayWithHoles","arr","Array","isArray","_iterableToArray","iter","Symbol","iterator","prototype","toString","call","from","_nonIterableRest","TypeError","drawSnake","state","_state$coords","coords","head","body","slice","SNAKE_COLOR","drawHead","_ref","drawSnakeMember","drawFeed","feed","drawFeedPixel","drawDisplay","font","textBaseline","textAlign","fillText","getScore","drawMenu","menuIndex","_slicedToArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","_iterableToArrayLimit","_toConsumableArray","arr2","_arrayWithoutHoles","_nonIterableSpread","getPreparedScoresList","scoresList","list","keyExtractor","transform","e","res","el","transformedEl","groupBy","score","drawScoresList","currentLine","currentColumn","currentPlace","entries","sort","a","b","_ref2","scores","place","reverse","_ref3","name","draw","clearRect","scene","generateFreePixel","excludedPixels","n","getHash","buildHashFunction","getPixel","hash","Math","floor","buildReverseHashFunction","excludedHashes","map","hashes","h","includes","random","isPixelsEqual","p1","p2","requestBuilder","url","params","method","onSuccess","onFailure","fetch","reduce","param","searchParams","set","URL","buildUrl","then","response","json","catch","pickAudio","Audio","pickSound","hitAudio","hitSound","askName","window","prompt","localStorage","level","postScoreResult","alert","update","lookahead","_state","lastDirection","tag","snakeDirection","some","f","play","walls","eaten","find","canvas","document","createElement","setAttribute","getElementById","appendChild","getContext","fps","defaultState","speed","initialized","onkeydown","code","loop","setTimeout","getFps"],"mappings":"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","file":"static/js/main.552df1d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pick.0e7d342a.wav\";","module.exports = __webpack_public_path__ + \"static/media/hit.fe22c65d.wav\";","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","export const strokePixel = (ctx, viewParams, i, j, color) => {\r\n    const { lineWidth, xPadding, yPadding, cellWidth } = viewParams;\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.strokeRect(\r\n        xPadding + cellWidth * i + lineWidth * 1.5,\r\n        yPadding + cellWidth * j + lineWidth * 1.5,\r\n        cellWidth - 3 * lineWidth,\r\n        cellWidth - 3 * lineWidth\r\n    );\r\n};\r\n\r\nexport const fillPixel = (ctx, viewParams, i, j, color) => {\r\n    const { lineWidth, xPadding, yPadding, cellWidth } = viewParams;\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(\r\n        xPadding + cellWidth * i + 3.5 * lineWidth,\r\n        yPadding + cellWidth * j + 3.5 * lineWidth,\r\n        cellWidth - 7 * lineWidth,\r\n        cellWidth - 7 * lineWidth\r\n    );\r\n};\r\n","import { fillPixel, strokePixel } from './pixel';\r\n\r\nconst drawFadedPixel = (ctx, viewParams, i, j) => {\r\n    strokePixel(ctx, viewParams, i, j, 'rgba(0, 128, 0, 0.2)');\r\n    fillPixel(ctx, viewParams, i, j, 'rgba(0, 128, 0, 0.2');\r\n};\r\n\r\nconst fillBackground = (ctx, viewParams) => {\r\n    const { width, height, displayHeight, columns, rows } = viewParams;\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillRect(0, 0, width, height + displayHeight);\r\n\r\n    for (let i = 0; i < columns; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n            drawFadedPixel(ctx, viewParams, i, j);\r\n        }\r\n    }\r\n};\r\n\r\nexport default fillBackground;\r\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import { fillPixel, strokePixel } from './pixel';\r\n\r\nconst drawSnakeMember = (ctx, viewParams, i, j) => {\r\n    strokePixel(ctx, viewParams, i, j, viewParams.SNAKE_COLOR);\r\n    fillPixel(ctx, viewParams, i, j, viewParams.SNAKE_COLOR);\r\n};\r\n\r\nconst drawHead = (ctx, viewParams, i, j) => {\r\n    strokePixel(ctx, viewParams, i, j, viewParams.SNAKE_COLOR);\r\n};\r\n\r\nconst drawSnake = (ctx, viewParams, state) => {\r\n    const [head, ...body] = state.coords;\r\n    drawHead(ctx, viewParams, head.i, head.j);\r\n    body.forEach(({ i, j }) => {\r\n        drawSnakeMember(ctx, viewParams, i, j);\r\n    });\r\n};\r\n\r\nexport default drawSnake;\r\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || nonIterableRest();\n}","import { fillPixel, strokePixel } from './pixel';\r\n\r\nconst drawFeedPixel = (ctx, viewParams, i, j) => {\r\n    strokePixel(ctx, viewParams, i, j, 'orange');\r\n    fillPixel(ctx, viewParams, i, j, 'orange');\r\n};\r\n\r\nconst drawFeed = (ctx, viewParams, state) => {\r\n    const { feed } = state;\r\n    feed.forEach(({ i, j }) => {\r\n        drawFeedPixel(ctx, viewParams, i, j);\r\n    });\r\n};\r\n\r\nexport default drawFeed;\r\n","const getScore = state => state.coords.length - 3;\r\n\r\nconst drawDisplay = (ctx, viewParams, state) => {\r\n    const { height, displayHeight } = viewParams;\r\n    ctx.fillStyle = 'green';\r\n    ctx.font = '80px Digital';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText(`Score: ${getScore(state)}`, 20, height + displayHeight / 2);\r\n};\r\n\r\nexport default drawDisplay;\r\n","const drawMenu = (ctx, viewParams, state) => {\r\n    const { height, displayHeight } = viewParams;\r\n    const { menuIndex } = state;\r\n\r\n    ctx.font = '80px Digital';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    ctx.textAlign = 'left';\r\n    ctx.fillStyle = menuIndex === 0 ? 'orange' : 'green';\r\n    ctx.fillText('play', 20, height + displayHeight / 2);\r\n\r\n    ctx.textAlign = 'right';\r\n    ctx.fillStyle = menuIndex === 1 ? 'orange' : 'green';\r\n    ctx.fillText('scores', viewParams.width - 20, height + displayHeight / 2);\r\n};\r\n\r\nexport default drawMenu;\r\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","const groupBy = (list, keyExtractor, transform = e => e) => {\r\n    let res = {};\r\n    list.forEach(el => {\r\n        const key = keyExtractor(el);\r\n        const transformedEl = transform(el);\r\n        res = { ...res, [key]: [...(res[key] || []), transformedEl] };\r\n    });\r\n    return res;\r\n};\r\n\r\nconst getPreparedScoresList = scoresList => groupBy(scoresList, el => el.score);\r\n\r\nconst drawScoresList = (ctx, viewParams, state) => {\r\n    const scoresList = getPreparedScoresList(state.scoresList);\r\n\r\n    ctx.font = '30px Digital';\r\n    ctx.textBaseline = 'top';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillStyle = 'green';\r\n\r\n    let currentLine = 1;\r\n    let currentColumn = 1;\r\n    let currentPlace = 1;\r\n    Object.entries(scoresList)\r\n        .sort((a, b) => b[0] - a[0])\r\n        .forEach(([key, scores]) => {\r\n            const place = scores.length === 1 ? currentPlace : `${currentPlace}-${currentPlace + scores.length - 1}`;\r\n            scores.reverse().forEach(({ name, score }) => {\r\n                ctx.fillText(`${place}. ${name} (${score})`, 30 + (currentColumn - 1) * 280, currentLine++ * 40);\r\n                currentPlace += scores.length;\r\n                if (currentLine > 8) {\r\n                    currentLine = 1;\r\n                    currentColumn++;\r\n                }\r\n            });\r\n        });\r\n};\r\n\r\nexport default drawScoresList;\r\n","import fillBackground from './background';\r\nimport drawSnake from './snake';\r\nimport drawFeed from './feed';\r\nimport drawDisplay from './display';\r\nimport drawMenu from './menu';\r\nimport drawScoresList from './scores';\r\n\r\nconst draw = (ctx, viewParams, state) => {\r\n    ctx.clearRect(0, 0, viewParams.width, viewParams.height);\r\n    fillBackground(ctx, viewParams);\r\n\r\n    switch (state.scene) {\r\n        case 'scores':\r\n            drawScoresList(ctx, viewParams, state);\r\n            break;\r\n        case 'menu':\r\n            drawSnake(ctx, viewParams, state);\r\n            drawFeed(ctx, viewParams, state);\r\n            drawMenu(ctx, viewParams, state);\r\n            break;\r\n        case 'game':\r\n            drawSnake(ctx, viewParams, state);\r\n            drawFeed(ctx, viewParams, state);\r\n            drawDisplay(ctx, viewParams, state);\r\n            break;\r\n        default:\r\n    }\r\n};\r\n\r\nexport default draw;\r\n","const range = n => [...Array(n)].map((i, j) => j);\r\n\r\nconst buildHashFunction = columns => ({ i, j }) => j * columns + i;\r\n\r\nconst buildReverseHashFunction = columns => hash => ({\r\n    i: hash % columns,\r\n    j: Math.floor(hash / columns)\r\n});\r\n\r\nconst getRandomElement = list => {\r\n    const index = Math.floor(Math.random() * list.length);\r\n    return list[index];\r\n};\r\n\r\nexport const generateFreePixel = (excludedPixels, rows, columns) => {\r\n    const getHash = buildHashFunction(columns);\r\n    const getPixel = buildReverseHashFunction(columns);\r\n    const excludedHashes = excludedPixels.map(getHash);\r\n    const hashes = range(columns * rows).filter(h => !excludedHashes.includes(h));\r\n    const hash = getRandomElement(hashes);\r\n\r\n    return getPixel(hash);\r\n};\r\n\r\nexport const isPixelsEqual = (p1, p2) => p1.i === p2.i && p1.j === p2.j;\r\n","const buildUrl = (url, params = {}) =>\r\n    Object.entries(params).reduce((url, [param, value]) => {\r\n        url.searchParams.set(param, value);\r\n        return url;\r\n    }, new URL(url));\r\n\r\nconst requestBuilder = (url, params = {}, method = 'GET', onSuccess, onFailure) => {\r\n    fetch(buildUrl(url, params), { method })\r\n        .then(response => response.json())\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n};\r\n\r\nexport default requestBuilder;\r\n","import { generateFreePixel, isPixelsEqual } from '../utils/helper';\r\nimport { DOWN, LEFT, RIGHT, UP } from '../constants/directions';\r\nimport pickSound from '../assets/sounds/pick.wav';\r\nimport hitSound from '../assets/sounds/hit.wav';\r\nimport { postScoreResult } from './helpers';\r\n\r\nconst pickAudio = new Audio(pickSound);\r\nconst hitAudio = new Audio(hitSound);\r\n\r\nconst askName = state => {\r\n    const name = window.prompt('Enter your name:', localStorage.name || 'Unnamed hero');\r\n    localStorage.name = name;\r\n    const score = state.coords.length - 3;\r\n    postScoreResult({ name, level: 1, score });\r\n    alert(`Congratulation, ${name}! You earned ${score} scores`);\r\n};\r\n\r\nconst update = (viewParams, state) => {\r\n    if (state.scene !== 'game') return state;\r\n\r\n    const { coords, lastDirection, feed } = state;\r\n    const { columns, rows } = viewParams;\r\n    const head = coords[0];\r\n    const tag = coords[coords.length - 1];\r\n    const body = coords.slice(1, -1);\r\n\r\n    let lookahead;\r\n    switch (lastDirection) {\r\n        case UP:\r\n            lookahead = { i: head.i, j: head.j - 1 };\r\n            break;\r\n        case DOWN:\r\n            lookahead = { i: head.i, j: head.j + 1 };\r\n            break;\r\n        case LEFT:\r\n            lookahead = { i: head.i - 1, j: head.j };\r\n            break;\r\n        case RIGHT:\r\n            lookahead = { i: head.i + 1, j: head.j };\r\n            break;\r\n        default:\r\n    }\r\n\r\n    state = { ...state, snakeDirection: lastDirection };\r\n\r\n    /// self crash\r\n    if (body.some(f => isPixelsEqual(f, lookahead))) {\r\n        hitAudio.play();\r\n        askName(state);\r\n        return null;\r\n    }\r\n\r\n    if (lookahead.i < 0 || lookahead.i >= columns || lookahead.j < 0 || lookahead.j >= rows) {\r\n        /// wall crash\r\n        if (state.walls) {\r\n            hitAudio.play();\r\n            askName(state);\r\n            return null;\r\n        } else {\r\n            lookahead.i = (lookahead.i + columns) % columns;\r\n            lookahead.j = (lookahead.j + rows) % rows;\r\n        }\r\n    }\r\n\r\n    const eaten = feed.find(f => isPixelsEqual(f, lookahead));\r\n    if (eaten) {\r\n        pickAudio.play();\r\n        return {\r\n            ...state,\r\n            feed: [...feed.filter(f => f !== eaten), generateFreePixel([...coords, ...feed], rows, columns)],\r\n            coords: [lookahead, head, ...body, tag]\r\n        };\r\n    } else {\r\n        return { ...state, coords: [lookahead, head, ...body] };\r\n    }\r\n};\r\n\r\nexport default update;\r\n","import requestBuilder from '../utils/api-utils';\r\n\r\nexport const getScoresList = (level, onSuccess, onFailure) => {\r\n    requestBuilder('https://snake-game-backend.glitch.me/api/records', { level }, 'GET', onSuccess, onFailure);\r\n};\r\n\r\nexport const postScoreResult = ({ name, score, level }, onSuccess, onFailure) => {\r\n    requestBuilder(\r\n        'https://snake-game-backend.glitch.me/api/records',\r\n        { name, score, level },\r\n        'POST',\r\n        onSuccess,\r\n        onFailure\r\n    );\r\n};\r\n","export const UP = 'up';\r\nexport const DOWN = 'down';\r\nexport const LEFT = 'left';\r\nexport const RIGHT = 'right';\r\n","import './index.css';\r\nimport draw from './draw/draw';\r\nimport update from './update/update';\r\nimport { DOWN, LEFT, RIGHT, UP } from './constants/directions';\r\nimport { getScoresList } from './update/helpers';\r\n\r\nconst SNAKE_COLOR = 'green';\r\n\r\nconst width = 800;\r\nconst height = 400;\r\nconst displayHeight = 100;\r\n\r\nconst fps = 100;\r\n\r\nconst canvas = document.createElement('canvas');\r\ncanvas.setAttribute('width', width);\r\ncanvas.setAttribute('height', height + displayHeight);\r\nconst root = document.getElementById('root');\r\nroot.appendChild(canvas);\r\n\r\nconst ctx = canvas.getContext('2d');\r\n\r\nconst cellWidth = 70;\r\nconst lineWidth = cellWidth / 10;\r\n\r\nconst rows = Math.floor(height / cellWidth);\r\nconst columns = Math.floor(width / cellWidth);\r\n\r\nconst yPadding = (height % cellWidth) / 2;\r\nconst xPadding = (width % cellWidth) / 2;\r\n\r\nconst viewParams = {\r\n    displayHeight,\r\n    width,\r\n    height,\r\n    cellWidth,\r\n    lineWidth,\r\n    rows,\r\n    columns,\r\n    yPadding,\r\n    xPadding,\r\n    SNAKE_COLOR,\r\n    fps\r\n};\r\n\r\nconst defaultState = {\r\n    scene: 'menu',\r\n    menuIndex: 0,\r\n    speed: 5,\r\n    coords: [{ i: 3, j: 2 }, { i: 2, j: 2 }, { i: 1, j: 2 }],\r\n    feed: [],\r\n    snakeDirection: DOWN,\r\n    lastDirection: RIGHT,\r\n    walls: false,\r\n    initialized: true\r\n};\r\n\r\nlet state = defaultState;\r\n\r\nconst getFps = () => {\r\n    switch (state.scene) {\r\n        case 'game':\r\n            return state.speed;\r\n        case 'menu':\r\n            return viewParams.fps;\r\n        case 'scores':\r\n            return 0.01;\r\n        default:\r\n            return fps;\r\n    }\r\n};\r\n\r\nconst loop = () => {\r\n    state = update(viewParams, state) || defaultState;\r\n    draw(ctx, viewParams, state);\r\n    setTimeout(loop, 1000 / getFps());\r\n};\r\n\r\nconst keyPressHandler = e => {\r\n    if (state.scene === 'menu') {\r\n        const { menuIndex } = state;\r\n        switch (e.code) {\r\n            case 'ArrowDown':\r\n            case 'KeyS':\r\n            case 'ArrowRight':\r\n            case 'KeyD':\r\n            case 'ArrowUp':\r\n            case 'KeyW':\r\n            case 'ArrowLeft':\r\n            case 'KeyA':\r\n                state = { ...state, menuIndex: 1 - menuIndex };\r\n                return;\r\n            case 'Space':\r\n            case 'Enter':\r\n                if (menuIndex === 0) {\r\n                    state = { ...state, scene: 'game', feed: [{ i: 6, j: 2 }] };\r\n                } else {\r\n                    getScoresList(1, scoresList => {\r\n                        state = { ...state, scene: 'scores', scoresList };\r\n                    });\r\n                }\r\n                return;\r\n            default:\r\n        }\r\n    } else {\r\n        const { snakeDirection } = state;\r\n        switch (e.code) {\r\n            case 'ArrowDown':\r\n            case 'KeyS':\r\n                if (snakeDirection !== UP) state = { ...state, lastDirection: DOWN };\r\n                return;\r\n            case 'ArrowUp':\r\n            case 'KeyW':\r\n                if (snakeDirection !== DOWN) state = { ...state, lastDirection: UP };\r\n                return;\r\n            case 'ArrowLeft':\r\n            case 'KeyA':\r\n                if (snakeDirection !== RIGHT) state = { ...state, lastDirection: LEFT };\r\n                return;\r\n            case 'ArrowRight':\r\n            case 'KeyD':\r\n                if (snakeDirection !== LEFT) state = { ...state, lastDirection: RIGHT };\r\n                return;\r\n            default:\r\n        }\r\n    }\r\n};\r\n\r\nwindow.onkeydown = keyPressHandler;\r\nloop();\r\n"],"sourceRoot":""}